name: Build, Test, and Push Docker Images

on:
  push:
    branches:
      - test
      - main

jobs:
  build-test-push:
    runs-on: ubuntu-20.04
    outputs:
      image1: ${{ steps.Build-test-grafana.outputs.image }} 
      image2: ${{ steps.Build-test-prometheus.outputs.image }}
    services:
      docker:
        image: docker:dind
        ports:
          - 2376/tcp
        options: >-
          --privileged
          --mount type=bind,source=/var/lib/docker,target=/var/lib/docker
          --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock
        env:
          DOCKER_TLS_CERTDIR: "/etc/docker/certs.d/pupaandlupa.space/"
    steps:
    - name: Set commit hash
      run: | 
        echo "TAG=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_ENV

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 5

    - name: Check for changes
      id: changes
      run: |
        git fetch --prune
       # CHANGED_FILES_graf=$(git diff --name-only HEAD~1 -- grafana/)
       # echo "CHANGED_FILES_graf=$CHANGED_FILES_graf" >> $GITHUB_ENV
       # echo "any_changes_graf=$(echo $CHANGED_FILES_graf | grep -E '^grafana/' | wc -l)" >> $GITHUB_ENV
       # CHANGED_FILES_prom=$(git diff --name-only HEAD~1 -- prometheus/)
       # echo "CHANGED_FILES_prom=$CHANGED_FILES_prom" >> $GITHUB_ENV
       # echo "any_changes_prom=$(echo $CHANGED_FILES_prom | grep -E '^prometheus/' | wc -l)" >> $GITHUB_ENV
        echo "any_changes_prom=1" >> $GITHUB_ENV
        echo "any_changes_graf=1" >> $GITHUB_ENV

    - name: Build-test-grafana
      if: ${{ env.any_changes_graf >= 1 }}
      run: |
        echo "Start building"
        docker build -t ${{ secrets.DOCKER_USERNAME }}/grafana:$TAG grafana/
        docker run -d -p 3000:3000 --name grafana ${{ secrets.DOCKER_USERNAME }}/grafana:${{ env.TAG }}
        echo "Testing image"
        docker exec grafana /bin/bash /etc/grafana/test-grafana.sh 
        echo "name=grafana:${{ env.TAG }}" >> $GITHUB_ENV

    - name: Build-test-prometheus
      if: ${{ env.any_changes_prom >= 1 }}
      run: |
        echo "Start building"
        docker build -t ${{ secrets.DOCKER_USERNAME }}/prometheus:$TAG prometheus/
        docker run -d -p 9090:9090 --name prometheus ${{ secrets.DOCKER_USERNAME }}/prometheus:${{ env.TAG }}
        echo "Testing image"  
        docker exec prometheus /bin/sh /etc/prometheus/test-prometheus.sh
        echo "name=prometheus:${{ env.TAG }}" >> $GITHUB_ENV
      
    - name: LoginDockerHub
      uses: docker/login-action@v1
      with:
        registry: https://index.docker.io/v1/
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        tls: ${{ secrets.DOCKER_TLS_VERIFY }}
        cert: ${{ secrets.DOCKER_CERT }}
        key: ${{ secrets.DOCKER_KEY }}
        ca: ${{ secrets.DOCKER_CA }}

    - name: Push-grafana
      if: ${{ env.any_changes_graf >= 1 }}
      run: |
        echo "Pushing image!"
        docker push ${{ secrets.DOCKER_USERNAME }}/grafana:${{ env.TAG }}

    - name: Push-prometheus
      if: ${{ env.any_changes_prom >= 1 }}
      run: |
        echo "Pushing image!"
        docker push ${{ secrets.DOCKER_USERNAME }}/prometheus:${{ env.TAG }}
 
    - name: Do-nothing
      if: ${{ steps.grafana_changes.outputs.any_changes_graf == '0' && steps.prometheus_changes.outputs.any_changes_prom == '0' }}
      run: |
        echo "No changes found"

  doploy:
    runs-on: ubuntu-20.04
    services:
      docker:
        image: docker:dind
        ports:
          - 2376/tcp
        options: >-
          --privileged
          --mount type=bind,source=/var/lib/docker,target=/var/lib/docker
          --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock
        env:
          name1: ${{needs.build-test-push.outputs.name1}}
          name2: ${{needs.build-test-push.outputs.name2}}
          image1: ${{ secrets.DOCKER_USERNAME }}/${{needs.build-test-push.outputs.image1}}
          image2: ${{ secrets.DOCKER_USERNAME }}/${{needs.build-test-push.outputs.image2}}

    steps:
    - name: add-certs
      run: |
        mkdir -p .docker && \
        echo ${{ secrets.DOCKER_CERT }} > .docker/cert.pem \
        echo ${{ secrets.DOCKER_KEY }} > .docker/key.pem \
        echo ${{ secrets.DOCKER_CA }} > .docker/ca.pem \
        export DOCKER_CERT_PATH=.docker/ 
    - name: deploy-container
      run: |
        export DOCKER_HOST="tcp://${{ secrets.DOCKER_HOST }}:2376";
        export DOCKER_TLS_VERIFY=1;
        docker --tls stop $name1 || true;
        docker --tls stop $name2 || true;
        docker --tls rm -f $name1 --force || true;
        docker --tls rm -f $name2 --force || true;
        docker --tls rmi -f $(docker --tls images -q) --force || true;
        docker --tls rmi -f $(docker --tls images -q) --force || true;
        docker --tls network disconnect --force host $name1 || true;
        docker --tls network disconnect --force host $name2 || true;
        docker --tls run -d --name $name1 --restart=unless-stopped --net="host" image1;
        docker --tls run -d --name $name2 --restart=unless-stopped --net="host" image2;
        sleep 5;
        done
        echo "deploy end"
